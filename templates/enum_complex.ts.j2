{%- let type_variant = ident.clone() %}
{%- for variant in variants -%}
  {%- match variant -%}
    {%- when EnumVariantDeclaration::Unit with { ident, value } %}
export const {{type_variant}}{{ident}} = {{loop.index - 1}};
    {%- when EnumVariantDeclaration::Unnamed with { ident, types } %}
export const {{type_variant}}{{ident}} = {{loop.index - 1}};
    {%- when EnumVariantDeclaration::Named with { ident, types } %}
export const {{type_variant}}{{ident}} = {{loop.index - 1}};
  {%- endmatch -%}
{% endfor -%} 

  {%- for variant in variants -%}
    {%- match variant -%}
      {%- when EnumVariantDeclaration::Unnamed with { ident, types } -%}
        {%- if types.len() > 1 %}  
export interface {{type_variant}}_{{ident}} {
          {%- for ty in types %}
  {{ loop.index - 1 }}: {{ ty.ts_type() }};
          {%- endfor %} 
}
        {% endif -%}
      {%- when EnumVariantDeclaration::Named with { ident, types } %}
export interface {{type_variant}}_{{ident}} {
          {%- for (id, ty) in types %}
  {{ id }}: {{ ty.ts_type() }};
          {%- endfor %}
}
      {% else %}
    {%- endmatch -%}
  {% endfor %} 

export function write{{ident}}(type: Number, value, sinkOrBuf?: SinkOrBuf): Sink {
  const sink = Sink.create(sinkOrBuf);
  writeU32(type, sink);
  switch(type) {
{%- for variant in variants %}
  {%- let i = loop.index %}
    case {{i - 1}}:
  {%- match variant -%}
    {%- when EnumVariantDeclaration::Unit with { ident, value } %}
    {%- when EnumVariantDeclaration::Unnamed with { ident, types } %}
      {%- if types.len() == 1 %}
      {{ variant.first_type().writer() }}(value, sink);
      {%- else %}
        {%- for ty in types %}
      {{ ty.writer() }}(value[{{loop.index -1}}], sink);
        {%- endfor %} 
      {%- endif -%}
    {%- when EnumVariantDeclaration::Named with { ident, types } %}
      {%- for (id, ty) in types %}
      {{ ty.writer() }}(value.{{id}}, sink);
      {%- endfor -%}
    {%- endmatch %}
      break;
{%- endfor %} 
  }

  return sink;
}

export function read{{ident}}(sinkOrBuf: SinkOrBuf): {{ident}} {
  const sink = Sink.create(sinkOrBuf), kind = readU32(sink), r = [kind];
  switch (kind) {
{%- for variant in variants %}
    case {{loop.index - 1}}:
  {%- match variant -%}
    {%- when EnumVariantDeclaration::Unit with { ident, value } %} 
    {%- when EnumVariantDeclaration::Unnamed with { ident, types } %}
      r.push(
        {%- if types.len() > 1 %}
        [
          {%- for ty in types %}
            {{ ty.reader() }}(sink),
          {%- endfor %} 
        ]
        {%- else %}
          {%- for ty in types %}
            {{ ty.reader() }}(sink)
          {%- endfor %} 
        {%- endif -%}
      );
    {%- when EnumVariantDeclaration::Named with { ident, types } %}
      r.push({
      {%- for (id, ty) in types %}
        {{ id }}: {{ ty.reader() }}(sink),
      {%- endfor %}
      });
  {%- endmatch -%}
      break;
{%- endfor %}
  }
  return r
}
